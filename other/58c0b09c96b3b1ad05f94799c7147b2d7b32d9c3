"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateList = exports.parseCodeFromMarkdown = exports.generateCode = void 0;
const openai_1 = require("openai");
const CodeGeneratorConfig_1 = require("./CodeGeneratorConfig");
function generateCode(description) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const openai = new openai_1.OpenAI();
        const response = yield openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            temperature: 0,
            messages: [
                { role: 'system', content: 'Return only the code and exclude example usage, markdown and all explanations, comments and notes.' },
                { role: 'system', content: `Write code in ${(_a = CodeGeneratorConfig_1.CodeGeneratorConfig.get().language) === null || _a === void 0 ? void 0 : _a.name}.` },
                { role: 'system', content: 'Export all objects generated.' },
                { role: 'user', content: description }
            ],
        });
        const code = response.choices[0].message.content;
        if (!code) {
            console.log(`Received response: ${JSON.stringify(response)}`);
            throw new Error(`Unable to generate code from description: ${description}`);
        }
        return parseCodeFromMarkdown(code);
    });
}
exports.generateCode = generateCode;
function parseCodeFromMarkdown(code) {
    if (!code.match(/```([\s\S]+?)```/g))
        return code;
    const filteredLines = [];
    let inCodeBlock = false;
    for (let line of code.split('\n')) {
        if (line.startsWith('```')) {
            inCodeBlock = !inCodeBlock;
            if (!inCodeBlock)
                filteredLines.push('');
            continue;
        }
        if (inCodeBlock)
            filteredLines.push(line);
    }
    // remove the last '' that will become a \n
    // we only want spaces between code blocks
    filteredLines.pop();
    return filteredLines.join('\n');
}
exports.parseCodeFromMarkdown = parseCodeFromMarkdown;
function generateList(description) {
    return __awaiter(this, void 0, void 0, function* () {
        // console.log(`Sending message: ${description}`);
        const openai = new openai_1.OpenAI();
        const response = yield openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            temperature: 0,
            messages: [
                { role: 'system', content: 'Return only the list and exclude example usage, markdown and all explanations, comments and notes.' },
                { role: 'system', content: 'Separate each item in the list by a ;' },
                { role: 'user', content: description }
            ],
        });
        const list = response.choices[0].message.content;
        if (!list) {
            console.log(`Received response: ${JSON.stringify(response)}`);
            throw new Error(`Unable to generate list from description: ${description}`);
        }
        return list.split(';').map(item => item.trim());
    });
}
exports.generateList = generateList;
