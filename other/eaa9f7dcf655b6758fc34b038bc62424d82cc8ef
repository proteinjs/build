"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceLoader = void 0;
const template_1 = require("./util/template");
const paragraph_1 = require("./util/paragraph");
const sentence_1 = require("./util/sentence");
// service interface and service loader
class ServiceLoader extends template_1.Template {
    generate(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ServiceLoader.GENERATED) {
                console.log(`Preventing duplicate generation of ${this.constructor.name}`);
                return;
            }
            const paragraph = new paragraph_1.Paragraph();
            paragraph.add(new sentence_1.Sentence().add(`Create a Service interface that has the following properties: path: string, call: async function(requestData: any)`));
            paragraph.add(new sentence_1.Sentence().add(`Create a loadServices function that iterates through all Service implementations and registers them as routes with the server so that when a request comes in matching a service's path, its call function is invoked with the request data, and the output of the function is returned by the server as the response data`));
            paragraph.add(new sentence_1.Sentence().add(`Register the loadServices function with the server so it gets executed on server startup`));
            if (args.additionalInstructions)
                paragraph.add(new sentence_1.Sentence().add(args.additionalInstructions));
            const description = paragraph.toString();
            const code = yield this.generateCode(description);
            yield this.writeFiles([{
                    name: this.constructor.name,
                    extension: 'ts',
                    content: code
                }]);
            ServiceLoader.GENERATED = true;
        });
    }
}
exports.ServiceLoader = ServiceLoader;
ServiceLoader.GENERATED = false;
