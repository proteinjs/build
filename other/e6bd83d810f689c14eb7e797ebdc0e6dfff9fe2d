"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const template_1 = require("./util/template");
const paragraph_1 = require("./util/paragraph");
const sentence_1 = require("./util/sentence");
const serviceLoader_1 = require("./serviceLoader");
class Service extends template_1.Template {
    generate(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { name, functionBody, path, serviceLoaderArgs, additionalInstructions } = args;
            yield new serviceLoader_1.ServiceLoader().generate(Object.assign({}, serviceLoaderArgs));
            const paragraph = new paragraph_1.Paragraph();
            paragraph.add(new sentence_1.Sentence().add(`Create a Service implementation named ${name}`));
            const resolvedPath = path ? path : 'the name of the service in lowercase';
            paragraph.add(new sentence_1.Sentence().add(`Set the path property of this service to ${resolvedPath}`));
            paragraph.add(new sentence_1.Sentence().add(functionBody));
            if (additionalInstructions)
                paragraph.add(new sentence_1.Sentence().add(additionalInstructions));
            const description = paragraph.toString();
            const code = yield this.generateCode(description);
            yield this.writeFiles([{
                    name: this.constructor.name,
                    extension: 'ts',
                    content: code
                }]);
        });
    }
}
exports.Service = Service;
