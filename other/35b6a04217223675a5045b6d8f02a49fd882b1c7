"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const template_1 = require("./util/template");
const paragraph_1 = require("./util/paragraph");
const sentence_1 = require("./util/sentence");
const CodeGeneratorConfig_1 = require("./util/CodeGeneratorConfig");
class Server extends template_1.Template {
    generate(args) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (Server.GENERATED) {
                console.log(`Preventing duplicate generation of ${this.constructor.name}`);
                return;
            }
            const paragraph = new paragraph_1.Paragraph();
            const createSentence = new sentence_1.Sentence();
            paragraph.add(createSentence);
            const language = args.language ? args.language.name : (_a = CodeGeneratorConfig_1.CodeGeneratorConfig.get().language) === null || _a === void 0 ? void 0 : _a.name;
            const runtime = args.runtime ? args.runtime : CodeGeneratorConfig_1.CodeGeneratorConfig.get().runtime;
            createSentence.add(`Create a server written in ${language}, in ${runtime}`);
            if (args.framework)
                createSentence.add(`using ${args.framework}`);
            if (args.additionalInstructions)
                paragraph.add(new sentence_1.Sentence().add(args.additionalInstructions));
            const description = paragraph.toString();
            const code = yield this.generateCode(description);
            yield this.writeFiles([{
                    name: this.constructor.name,
                    extension: ((_b = args.language) === null || _b === void 0 ? void 0 : _b.fileExtension) ? args.language.fileExtension : 'ts',
                    content: code
                }]);
            Server.GENERATED = true;
        });
    }
}
exports.Server = Server;
Server.GENERATED = false;
