"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Template = void 0;
const fs_1 = __importDefault(require("fs"));
const fsConfig_1 = require("./fsConfig");
class Template {
    constructor() {
        this.metadata = {};
    }
    writeFiles(files) {
        return __awaiter(this, void 0, void 0, function* () {
            const directory = fsConfig_1.FsConfig.get().srcPath;
            for (let file of files) {
                const relativeFilePath = this.relativeFilePath(file.name, file.extension, file.relativePath);
                if (file.relativePath && file.relativePath.includes('..'))
                    throw new Error(`Failed to write file: ${relativeFilePath}, file path cannot contain '..'`);
                const filePath = this.filePath(directory, relativeFilePath);
                yield fs_1.default.promises.writeFile(filePath, file.content, 'utf8');
            }
        });
    }
    relativeFilePath(fileName, fileExtension, fileRelativePath) {
        if (!fileRelativePath)
            return fileName + fileExtension;
        let path = fileRelativePath;
        if (path.startsWith('/'))
            path = path.slice(1);
        if (!path.endsWith('/'))
            path += '/';
        return path + fileName + fileExtension;
    }
    filePath(directory, relativeFilePath) {
        if (directory.endsWith('/'))
            return directory + relativeFilePath;
        return directory + '/' + relativeFilePath;
    }
}
exports.Template = Template;
