"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
const template_1 = require("./util/template");
const paragraph_1 = require("./util/paragraph");
const sentence_1 = require("./util/sentence");
const type_1 = require("./type");
const table_1 = require("./table");
const server_1 = require("./server");
const service_1 = require("./service");
class Component extends template_1.Template {
    generate(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { typeArgs, tableArgs, serverArgs, serviceLoaderArgs, serviceArgs } = args;
            yield new type_1.Type().generate(typeArgs);
            if (!tableArgs || tableArgs.createTable) {
                const ta = tableArgs ? tableArgs : {};
                yield new table_1.Table().generate(Object.assign({ name: ta.name || typeArgs.name, columns: typeArgs.properties }, ta));
            }
            if (!serverArgs || serverArgs.createServer) {
                yield new server_1.Server().generate(Object.assign({}, serverArgs));
            }
            if (!serviceLoaderArgs || serviceLoaderArgs.createServiceLoader) {
                if (serviceArgs && serviceArgs.name && serviceArgs.functionBody) {
                    yield new service_1.Service().generate(serviceArgs);
                }
                else if (!tableArgs || tableArgs.createTable) {
                    // table crud operation router
                    const paragraph = new paragraph_1.Paragraph();
                    paragraph.add(new sentence_1.Sentence().add(`The service call function should expect the type of the request data to be of type { operation: 'create'|'read'|'update'|'delete', table: string, object: ${typeArgs.name} }`));
                    paragraph.add(new sentence_1.Sentence().add(`The service call function should, depending on the operation, call the corresponding table crud function for the table specified, and pass in object`));
                    paragraph.add(new sentence_1.Sentence().add(`The service call function should return the same type as the table crud function return type`));
                    yield new service_1.Service().generate({ name: typeArgs.name, functionBody: paragraph.toString() });
                }
            }
        });
    }
}
exports.Component = Component;
