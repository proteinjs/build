"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const template_1 = require("./util/template");
const sentence_1 = require("./util/sentence");
const CodeGeneratorConfig_1 = require("./util/CodeGeneratorConfig");
class Type extends template_1.Template {
    generate(args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { name, properties } = args;
            const sentence = new sentence_1.Sentence();
            sentence.add(`Create a type in ${(_a = CodeGeneratorConfig_1.CodeGeneratorConfig.get().language) === null || _a === void 0 ? void 0 : _a.name} named ${name}`);
            if (args.properties)
                sentence.add(`with properties: ${JSON.stringify(properties)}`);
            const description = sentence.toString();
            const code = yield this.generateCode(description);
            yield this.writeFiles([{
                    name: args.name,
                    extension: 'ts',
                    relativePath: this.constructor.name,
                    content: code
                }]);
        });
    }
}
exports.Type = Type;
